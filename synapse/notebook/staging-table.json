{
	"name": "staging-table",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "splink",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "12315912-7788-464e-9e94-548820b25964"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/fb7151e9-9012-4b51-990a-16b26a37bf06/resourceGroups/synapse_asg_link/providers/Microsoft.Synapse/workspaces/synapse-linkedin-project/bigDataPools/splink",
				"name": "splink",
				"type": "Spark",
				"endpoint": "https://synapse-linkedin-project.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/splink",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# libraries\r\n",
					"\r\n",
					"from delta.tables import DeltaTable\r\n",
					"from pyspark.sql.utils import AnalysisException\r\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"# create and inset new data in a spark pool table\r\n",
					"\r\n",
					"table_name = \"landing_linkedin_jobs\"\r\n",
					"\r\n",
					"adls_name = mssparkutils.credentials.getSecret(\"linkedinkv\", \"adls-name\")\r\n",
					"adls_bucket = mssparkutils.credentials.getSecret(\"linkedinkv\", \"adls-bucket\")\r\n",
					"\r\n",
					"file_path = f\"abfss://{adls_bucket}@{adls_name}.dfs.core.windows.net/data\"\r\n",
					"\r\n",
					"\r\n",
					"df_link = spark.read.format(\"delta\").load(file_path)\r\n",
					"\r\n",
					"# Verify if the table exists, create otherwise.\r\n",
					"\r\n",
					"try:\r\n",
					"    staging_table_name = DeltaTable.forName(spark, table_name)\r\n",
					"    staging_natural_name = staging_table_name.detail().collect()[0].name.split(\".\")[-1]\r\n",
					"    print(\"Actualizando tabla...\")\r\n",
					"\r\n",
					"    # Actualizamos tabla mediante un merge\r\n",
					"    staging_table_name.alias(\"sta\")\\\r\n",
					"                      .merge(df_link.alias(\"new_data\"), \"sta.job_urn = new_data.job_urn\")\\\r\n",
					"                      .whenMatchedUpdateAll()\\\r\n",
					"                      .whenNotMatchedInsertAll()\\\r\n",
					"                      .execute()\r\n",
					"\r\n",
					"    print(f\"Tabla {staging_natural_name} actualizada.\")\r\n",
					"except AnalysisException:\r\n",
					"    print(\"Creando tabla...\")\r\n",
					"    df_link.write.format(\"delta\").mode(\"overwrite\")\\\r\n",
					"                                 .option(\"overwriteSchema\", \"true\")\\\r\n",
					"                                 .saveAsTable(table_name)\r\n",
					"    print(f\"Tabla {table_name} creada.\")\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.sql(\"SELECT * FROM landing_linkedin_jobs\")\r\n",
					"display(df)"
				],
				"execution_count": 3
			}
		]
	}
}